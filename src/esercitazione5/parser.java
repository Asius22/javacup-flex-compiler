
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione5;

import nodes.ops.*;
import nodes.stmt.*;
import nodes.leafs.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\005\005\000\002\005\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\003\000\002\007\005\000\002\007" +
    "\005\000\002\007\007\000\002\012\005\000\002\012\007" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\034\012\000\002\036\006\000\002\014\002\000\002\014" +
    "\003\000\002\015\003\000\002\015\005\000\002\016\004" +
    "\000\002\016\005\000\002\035\003\000\002\035\003\000" +
    "\002\010\002\000\002\010\004\000\002\017\004\000\002" +
    "\017\002\000\002\020\003\000\002\020\003\000\002\020" +
    "\004\000\002\020\004\000\002\020\004\000\002\020\003" +
    "\000\002\020\004\000\002\020\004\000\002\020\005\000" +
    "\002\020\004\000\002\037\006\000\002\041\005\000\002" +
    "\040\004\000\002\040\003\000\002\021\007\000\002\022" +
    "\002\000\002\022\004\000\002\023\006\000\002\024\012" +
    "\000\002\025\005\000\002\025\004\000\002\026\003\000" +
    "\002\026\005\000\002\027\006\000\002\027\006\000\002" +
    "\030\005\000\002\031\006\000\002\031\005\000\002\032" +
    "\003\000\002\032\005\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\004\000\002\033\004\000\002\033" +
    "\005\000\002\033\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\022\004\ufffd\010\013\011\005\012\012\013" +
    "\007\014\017\016\016\057\015\001\002\000\004\065\255" +
    "\001\002\000\006\060\ufff9\065\ufff9\001\002\000\004\002" +
    "\254\001\002\000\006\060\ufff8\065\ufff8\001\002\000\024" +
    "\002\ufffd\004\ufffd\010\013\011\005\012\012\013\007\014" +
    "\017\016\016\057\015\001\002\000\024\002\ufffd\004\ufffd" +
    "\010\013\011\005\012\012\013\007\014\017\016\016\057" +
    "\015\001\002\000\006\060\ufff6\065\ufff6\001\002\000\004" +
    "\065\233\001\002\000\004\004\227\001\002\000\006\060" +
    "\ufff7\065\ufff7\001\002\000\004\065\020\001\002\000\006" +
    "\060\ufff5\065\ufff5\001\002\000\004\031\021\001\002\000" +
    "\020\011\005\012\012\013\007\014\017\017\026\032\uffe6" +
    "\057\015\001\002\000\004\032\037\001\002\000\004\065" +
    "\030\001\002\000\006\007\uffe4\032\uffe4\001\002\000\006" +
    "\007\034\032\uffe5\001\002\000\014\011\005\012\012\013" +
    "\007\014\017\057\015\001\002\000\004\065\030\001\002" +
    "\000\010\006\uffc5\007\uffc5\032\uffc5\001\002\000\010\006" +
    "\032\007\uffe1\032\uffe1\001\002\000\004\065\033\001\002" +
    "\000\014\006\uffc4\007\uffc4\026\uffc4\032\uffc4\034\uffc4\001" +
    "\002\000\016\011\005\012\012\013\007\014\017\017\026" +
    "\057\015\001\002\000\006\007\uffe3\032\uffe3\001\002\000" +
    "\010\006\032\007\uffe2\032\uffe2\001\002\000\004\033\040" +
    "\001\002\000\016\011\005\012\012\013\007\014\017\015" +
    "\043\057\015\001\002\000\004\060\044\001\002\000\004" +
    "\060\uffe0\001\002\000\004\060\uffdf\001\002\000\036\010" +
    "\013\011\005\012\012\013\007\014\017\020\uffde\021\uffde" +
    "\023\uffde\031\uffde\035\uffde\057\015\061\uffde\063\uffde\065" +
    "\uffde\001\002\000\024\002\uffe8\004\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\016\uffe8\057\uffe8\001\002\000" +
    "\022\020\070\021\061\023\055\031\071\035\056\061\uffdb" +
    "\063\057\065\062\001\002\000\036\010\013\011\005\012" +
    "\012\013\007\014\017\020\uffde\021\uffde\023\uffde\031\uffde" +
    "\035\uffde\057\015\061\uffde\063\uffde\065\uffde\001\002\000" +
    "\022\020\uffdd\021\uffdd\023\uffdd\031\uffdd\035\uffdd\061\uffdd" +
    "\063\uffdd\065\uffdd\001\002\000\022\020\uffd9\021\uffd9\023" +
    "\uffd9\031\uffd9\035\uffd9\061\uffd9\063\uffd9\065\uffd9\001\002" +
    "\000\004\005\226\001\002\000\022\020\070\021\061\023" +
    "\055\031\071\035\056\061\uffdb\063\057\065\062\001\002" +
    "\000\004\005\224\001\002\000\062\025\uffa3\031\102\036" +
    "\100\037\103\040\uffa3\041\074\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\110\065\106\066\101\067\107" +
    "\070\075\071\105\001\002\000\062\005\217\031\102\036" +
    "\100\037\103\040\uffa3\041\074\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\110\065\106\066\101\067\107" +
    "\070\075\071\105\001\002\000\004\065\206\001\002\000" +
    "\004\005\205\001\002\000\062\031\102\036\100\037\103" +
    "\040\uffa3\041\074\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\055\uffa3\056\110\062\uffa3\065\106\066\101\067\107\070" +
    "\075\071\105\001\002\000\012\006\uffc5\026\uffc5\031\146" +
    "\034\uffc5\001\002\000\004\061\176\001\002\000\010\006" +
    "\032\026\172\034\173\001\002\000\022\020\uffd5\021\uffd5" +
    "\023\uffd5\031\uffd5\035\uffd5\061\uffd5\063\uffd5\065\uffd5\001" +
    "\002\000\004\005\171\001\002\000\022\020\uffda\021\uffda" +
    "\023\uffda\031\uffda\035\uffda\061\uffda\063\uffda\065\uffda\001" +
    "\002\000\004\065\162\001\002\000\064\006\uffa3\031\102" +
    "\032\uffa3\036\100\037\103\040\uffa3\041\074\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\110\065\106\066" +
    "\101\067\107\070\075\071\105\001\002\000\004\005\073" +
    "\001\002\000\022\020\uffd3\021\uffd3\023\uffd3\031\uffd3\035" +
    "\uffd3\061\uffd3\063\uffd3\065\uffd3\001\002\000\074\005\uffa3" +
    "\006\uffa3\025\uffa3\031\102\032\uffa3\036\100\037\103\040" +
    "\uffa3\041\074\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\056\110\060\uffa3\062\uffa3\065\106\066\101\067\107" +
    "\070\075\071\105\001\002\000\052\005\uffb9\006\uffb9\025" +
    "\uffb9\032\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\060\uffb9\062\uffb9\001\002\000\044" +
    "\005\uffbe\006\157\032\uffbe\040\117\041\112\042\123\043" +
    "\121\044\114\045\125\046\116\047\124\050\126\051\120" +
    "\052\122\053\115\054\113\055\127\001\002\000\004\032" +
    "\154\001\002\000\052\005\uffbc\006\uffbc\025\uffbc\032\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\060\uffbc\062\uffbc\001\002\000\052\005\uffb8\006" +
    "\uffb8\025\uffb8\032\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\060\uffb8\062\uffb8\001\002" +
    "\000\062\031\102\032\uffa3\036\100\037\103\040\uffa3\041" +
    "\074\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056" +
    "\110\065\106\066\101\067\107\070\075\071\105\001\002" +
    "\000\052\005\uffbb\006\uffbb\025\uffbb\032\uffbb\040\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\060" +
    "\uffbb\062\uffbb\001\002\000\052\005\uffb5\006\uffb5\025\uffb5" +
    "\032\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\060\uffb5\062\uffb5\001\002\000\052\005" +
    "\uffba\006\uffba\025\uffba\032\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051" +
    "\uffba\052\uffba\053\uffba\054\uffba\055\uffba\060\uffba\062\uffba" +
    "\001\002\000\054\005\uffb6\006\uffb6\025\uffb6\031\146\032" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\055\uffb6\060\uffb6\062\uffb6\001\002\000\052\005\uffb7" +
    "\006\uffb7\025\uffb7\032\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\060\uffb7\062\uffb7\001" +
    "\002\000\074\005\uffa3\006\uffa3\025\uffa3\031\102\032\uffa3" +
    "\036\100\037\103\040\uffa3\041\074\042\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\056\110\060\uffa3\062\uffa3\065" +
    "\106\066\101\067\107\070\075\071\105\001\002\000\052" +
    "\005\uffa5\006\uffa5\025\uffa5\032\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\114\045\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\060\uffa5\062" +
    "\uffa5\001\002\000\074\005\uffa3\006\uffa3\025\uffa3\031\102" +
    "\032\uffa3\036\100\037\103\040\uffa3\041\074\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\110\060\uffa3\062" +
    "\uffa3\065\106\066\101\067\107\070\075\071\105\001\002" +
    "\000\074\005\uffa3\006\uffa3\025\uffa3\031\102\032\uffa3\036" +
    "\100\037\103\040\uffa3\041\074\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\110\060\uffa3\062\uffa3\065\106" +
    "\066\101\067\107\070\075\071\105\001\002\000\074\005" +
    "\uffa3\006\uffa3\025\uffa3\031\102\032\uffa3\036\100\037\103" +
    "\040\uffa3\041\074\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\055\uffa3\056\110\060\uffa3\062\uffa3\065\106\066\101\067" +
    "\107\070\075\071\105\001\002\000\074\005\uffa3\006\uffa3" +
    "\025\uffa3\031\102\032\uffa3\036\100\037\103\040\uffa3\041" +
    "\074\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056" +
    "\110\060\uffa3\062\uffa3\065\106\066\101\067\107\070\075" +
    "\071\105\001\002\000\074\005\uffa3\006\uffa3\025\uffa3\031" +
    "\102\032\uffa3\036\100\037\103\040\uffa3\041\074\042\uffa3" +
    "\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\110\060\uffa3" +
    "\062\uffa3\065\106\066\101\067\107\070\075\071\105\001" +
    "\002\000\074\005\uffa3\006\uffa3\025\uffa3\031\102\032\uffa3" +
    "\036\100\037\103\040\uffa3\041\074\042\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\056\110\060\uffa3\062\uffa3\065" +
    "\106\066\101\067\107\070\075\071\105\001\002\000\074" +
    "\005\uffa3\006\uffa3\025\uffa3\031\102\032\uffa3\036\100\037" +
    "\103\040\uffa3\041\074\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\055\uffa3\056\110\060\uffa3\062\uffa3\065\106\066\101" +
    "\067\107\070\075\071\105\001\002\000\074\005\uffa3\006" +
    "\uffa3\025\uffa3\031\102\032\uffa3\036\100\037\103\040\uffa3" +
    "\041\074\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\056\110\060\uffa3\062\uffa3\065\106\066\101\067\107\070" +
    "\075\071\105\001\002\000\074\005\uffa3\006\uffa3\025\uffa3" +
    "\031\102\032\uffa3\036\100\037\103\040\uffa3\041\074\042" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3" +
    "\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\110\060" +
    "\uffa3\062\uffa3\065\106\066\101\067\107\070\075\071\105" +
    "\001\002\000\074\005\uffa3\006\uffa3\025\uffa3\031\102\032" +
    "\uffa3\036\100\037\103\040\uffa3\041\074\042\uffa3\043\uffa3" +
    "\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052" +
    "\uffa3\053\uffa3\054\uffa3\055\uffa3\056\110\060\uffa3\062\uffa3" +
    "\065\106\066\101\067\107\070\075\071\105\001\002\000" +
    "\074\005\uffa3\006\uffa3\025\uffa3\031\102\032\uffa3\036\100" +
    "\037\103\040\uffa3\041\074\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\056\110\060\uffa3\062\uffa3\065\106\066" +
    "\101\067\107\070\075\071\105\001\002\000\074\005\uffa3" +
    "\006\uffa3\025\uffa3\031\102\032\uffa3\036\100\037\103\040" +
    "\uffa3\041\074\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\056\110\060\uffa3\062\uffa3\065\106\066\101\067\107" +
    "\070\075\071\105\001\002\000\074\005\uffa3\006\uffa3\025" +
    "\uffa3\031\102\032\uffa3\036\100\037\103\040\uffa3\041\074" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\110" +
    "\060\uffa3\062\uffa3\065\106\066\101\067\107\070\075\071" +
    "\105\001\002\000\074\005\uffa3\006\uffa3\025\uffa3\031\102" +
    "\032\uffa3\036\100\037\103\040\uffa3\041\074\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\110\060\uffa3\062" +
    "\uffa3\065\106\066\101\067\107\070\075\071\105\001\002" +
    "\000\052\005\uffad\006\uffad\025\uffad\032\uffad\040\uffad\041" +
    "\uffad\042\uffad\043\uffad\044\114\045\uffad\046\116\047\124" +
    "\050\126\051\120\052\122\053\115\054\uffad\055\uffad\060" +
    "\uffad\062\uffad\001\002\000\036\005\uffaa\006\uffaa\025\uffaa" +
    "\032\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\114\045" +
    "\uffaa\054\uffaa\055\uffaa\060\uffaa\062\uffaa\001\002\000\052" +
    "\005\uffae\006\uffae\025\uffae\032\uffae\040\uffae\041\uffae\042" +
    "\123\043\121\044\114\045\uffae\046\116\047\124\050\126" +
    "\051\120\052\122\053\115\054\113\055\127\060\uffae\062" +
    "\uffae\001\002\000\036\005\uffa7\006\uffa7\025\uffa7\032\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\114\045\uffa7\054" +
    "\uffa7\055\uffa7\060\uffa7\062\uffa7\001\002\000\052\005\uffb2" +
    "\006\uffb2\025\uffb2\032\uffb2\040\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\044\114\045\uffb2\046\116\047\124\050\126\051\120" +
    "\052\122\053\115\054\113\055\127\060\uffb2\062\uffb2\001" +
    "\002\000\036\005\uffac\006\uffac\025\uffac\032\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\114\045\uffac\054\uffac\055" +
    "\uffac\060\uffac\062\uffac\001\002\000\052\005\uffb1\006\uffb1" +
    "\025\uffb1\032\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\114\045\uffb1\046\116\047\124\050\126\051\120\052\122" +
    "\053\115\054\113\055\127\060\uffb1\062\uffb1\001\002\000" +
    "\036\005\uffa9\006\uffa9\025\uffa9\032\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\114\045\uffa9\054\uffa9\055\uffa9\060" +
    "\uffa9\062\uffa9\001\002\000\052\005\uffb4\006\uffb4\025\uffb4" +
    "\032\uffb4\040\uffb4\041\uffb4\042\123\043\121\044\114\045" +
    "\125\046\116\047\124\050\126\051\120\052\122\053\115" +
    "\054\113\055\127\060\uffb4\062\uffb4\001\002\000\036\005" +
    "\uffa8\006\uffa8\025\uffa8\032\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\044\114\045\uffa8\054\uffa8\055\uffa8\060\uffa8\062" +
    "\uffa8\001\002\000\036\005\uffab\006\uffab\025\uffab\032\uffab" +
    "\040\uffab\041\uffab\042\uffab\043\uffab\044\114\045\uffab\054" +
    "\uffab\055\uffab\060\uffab\062\uffab\001\002\000\052\005\uffaf" +
    "\006\uffaf\025\uffaf\032\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\044\114\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\060\uffaf\062\uffaf\001" +
    "\002\000\052\005\uffb0\006\uffb0\025\uffb0\032\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\114\045\uffb0\046\116\047" +
    "\124\050\126\051\120\052\122\053\115\054\uffb0\055\uffb0" +
    "\060\uffb0\062\uffb0\001\002\000\052\005\uffb3\006\uffb3\025" +
    "\uffb3\032\uffb3\040\uffb3\041\uffb3\042\123\043\121\044\114" +
    "\045\125\046\116\047\124\050\126\051\120\052\122\053" +
    "\115\054\113\055\127\060\uffb3\062\uffb3\001\002\000\064" +
    "\006\uffa3\031\102\032\150\036\100\037\103\040\uffa3\041" +
    "\074\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056" +
    "\110\065\106\066\101\067\107\070\075\071\105\001\002" +
    "\000\004\032\151\001\002\000\052\005\uffbf\006\uffbf\025" +
    "\uffbf\032\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\060\uffbf\062\uffbf\001\002\000\052" +
    "\005\uffc0\006\uffc0\025\uffc0\032\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\060\uffc0\062" +
    "\uffc0\001\002\000\040\032\153\040\117\041\112\042\123" +
    "\043\121\044\114\045\125\046\116\047\124\050\126\051" +
    "\120\052\122\053\115\054\113\055\127\001\002\000\052" +
    "\005\uffa4\006\uffa4\025\uffa4\032\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4" +
    "\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\060\uffa4\062" +
    "\uffa4\001\002\000\006\027\155\030\156\001\002\000\004" +
    "\005\uffc3\001\002\000\004\005\uffc2\001\002\000\066\005" +
    "\uffa3\006\uffa3\031\102\032\uffa3\036\100\037\103\040\uffa3" +
    "\041\074\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\056\110\065\106\066\101\067\107\070\075\071\105\001" +
    "\002\000\006\005\uffbd\032\uffbd\001\002\000\052\005\uffa6" +
    "\006\uffa6\025\uffa6\032\uffa6\040\uffa6\041\uffa6\042\123\043" +
    "\121\044\114\045\125\046\116\047\124\050\126\051\120" +
    "\052\122\053\115\054\113\055\127\060\uffa6\062\uffa6\001" +
    "\002\000\004\034\163\001\002\000\004\071\164\001\002" +
    "\000\004\024\165\001\002\000\004\071\166\001\002\000" +
    "\004\025\167\001\002\000\004\060\044\001\002\000\022" +
    "\020\uffc8\021\uffc8\023\uffc8\031\uffc8\035\uffc8\061\uffc8\063" +
    "\uffc8\065\uffc8\001\002\000\022\020\uffd7\021\uffd7\023\uffd7" +
    "\031\uffd7\035\uffd7\061\uffd7\063\uffd7\065\uffd7\001\002\000" +
    "\006\005\uffc6\066\175\001\002\000\064\005\uffa3\006\uffa3" +
    "\031\102\036\100\037\103\040\uffa3\041\074\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\110\065\106\066" +
    "\101\067\107\070\075\071\105\001\002\000\004\005\uffc1" +
    "\001\002\000\004\005\uffc7\001\002\000\052\002\uffe7\004" +
    "\uffe7\005\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\016\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\031\uffe7\035" +
    "\uffe7\057\uffe7\061\uffe7\063\uffe7\064\uffe7\065\uffe7\001\002" +
    "\000\040\040\117\041\112\042\123\043\121\044\114\045" +
    "\125\046\116\047\124\050\126\051\120\052\122\053\115" +
    "\054\113\055\127\062\200\001\002\000\004\060\044\001" +
    "\002\000\024\020\uffcb\021\uffcb\022\202\023\uffcb\031\uffcb" +
    "\035\uffcb\061\uffcb\063\uffcb\065\uffcb\001\002\000\004\060" +
    "\044\001\002\000\022\020\uffcc\021\uffcc\023\uffcc\031\uffcc" +
    "\035\uffcc\061\uffcc\063\uffcc\065\uffcc\001\002\000\022\020" +
    "\uffca\021\uffca\023\uffca\031\uffca\035\uffca\061\uffca\063\uffca" +
    "\065\uffca\001\002\000\022\020\uffd4\021\uffd4\023\uffd4\031" +
    "\uffd4\035\uffd4\061\uffd4\063\uffd4\065\uffd4\001\002\000\004" +
    "\033\207\001\002\000\004\064\211\001\002\000\006\005" +
    "\uffcd\064\211\001\002\000\062\031\102\036\100\037\103" +
    "\040\uffa3\041\074\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\055\uffa3\056\110\060\uffa3\065\106\066\101\067\107\070" +
    "\075\071\105\001\002\000\004\005\uffd0\001\002\000\040" +
    "\040\117\041\112\042\123\043\121\044\114\045\125\046" +
    "\116\047\124\050\126\051\120\052\122\053\115\054\113" +
    "\055\127\060\044\001\002\000\006\005\uffcf\064\uffcf\001" +
    "\002\000\004\005\uffce\001\002\000\040\005\220\040\117" +
    "\041\112\042\123\043\121\044\114\045\125\046\116\047" +
    "\124\050\126\051\120\052\122\053\115\054\113\055\127" +
    "\001\002\000\022\020\uffd1\021\uffd1\023\uffd1\031\uffd1\035" +
    "\uffd1\061\uffd1\063\uffd1\065\uffd1\001\002\000\022\020\uffd2" +
    "\021\uffd2\023\uffd2\031\uffd2\035\uffd2\061\uffd2\063\uffd2\065" +
    "\uffd2\001\002\000\040\025\222\040\117\041\112\042\123" +
    "\043\121\044\114\045\125\046\116\047\124\050\126\051" +
    "\120\052\122\053\115\054\113\055\127\001\002\000\004" +
    "\060\044\001\002\000\022\020\uffc9\021\uffc9\023\uffc9\031" +
    "\uffc9\035\uffc9\061\uffc9\063\uffc9\065\uffc9\001\002\000\022" +
    "\020\uffd6\021\uffd6\023\uffd6\031\uffd6\035\uffd6\061\uffd6\063" +
    "\uffd6\065\uffd6\001\002\000\004\061\uffdc\001\002\000\022" +
    "\020\uffd8\021\uffd8\023\uffd8\031\uffd8\035\uffd8\061\uffd8\063" +
    "\uffd8\065\uffd8\001\002\000\004\016\016\001\002\000\022" +
    "\002\ufffd\010\013\011\005\012\012\013\007\014\017\016" +
    "\016\057\015\001\002\000\004\002\000\001\002\000\022" +
    "\002\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\016" +
    "\ufffc\057\ufffc\001\002\000\004\034\250\001\002\000\006" +
    "\005\236\006\235\001\002\000\004\065\237\001\002\000" +
    "\044\002\ufffa\004\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\016\ufffa\020\ufffa\021\ufffa\023\ufffa\031\ufffa\035" +
    "\ufffa\057\ufffa\061\ufffa\063\ufffa\065\ufffa\001\002\000\004" +
    "\034\240\001\002\000\016\036\243\037\244\066\241\067" +
    "\247\070\245\071\242\001\002\000\006\005\uffea\006\uffea" +
    "\001\002\000\006\005\uffee\006\uffee\001\002\000\006\005" +
    "\uffec\006\uffec\001\002\000\006\005\uffeb\006\uffeb\001\002" +
    "\000\006\005\uffed\006\uffed\001\002\000\006\005\uffef\006" +
    "\uffef\001\002\000\006\005\uffe9\006\uffe9\001\002\000\016" +
    "\036\243\037\244\066\241\067\247\070\245\071\242\001" +
    "\002\000\006\005\ufff0\006\ufff0\001\002\000\006\002\uffff" +
    "\004\uffff\001\002\000\006\002\ufffe\004\ufffe\001\002\000" +
    "\004\002\001\001\002\000\010\005\ufff4\006\ufff4\034\264" +
    "\001\002\000\006\005\260\006\257\001\002\000\004\065" +
    "\261\001\002\000\044\002\ufffb\004\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\016\ufffb\020\ufffb\021\ufffb\023" +
    "\ufffb\031\ufffb\035\ufffb\057\ufffb\061\ufffb\063\ufffb\065\ufffb" +
    "\001\002\000\010\005\ufff3\006\ufff3\034\262\001\002\000" +
    "\064\005\uffa3\006\uffa3\031\102\036\100\037\103\040\uffa3" +
    "\041\074\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\056\110\065\106\066\101\067\107\070\075\071\105\001" +
    "\002\000\042\005\ufff1\006\ufff1\040\117\041\112\042\123" +
    "\043\121\044\114\045\125\046\116\047\124\050\126\051" +
    "\120\052\122\053\115\054\113\055\127\001\002\000\064" +
    "\005\uffa3\006\uffa3\031\102\036\100\037\103\040\uffa3\041" +
    "\074\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056" +
    "\110\065\106\066\101\067\107\070\075\071\105\001\002" +
    "\000\042\005\ufff2\006\ufff2\040\117\041\112\042\123\043" +
    "\121\044\114\045\125\046\116\047\124\050\126\051\120" +
    "\052\122\053\115\054\113\055\127\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\014\002\005\003\013\005\010\006\003\034" +
    "\007\001\001\000\004\007\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\252\005" +
    "\010\006\003\034\007\001\001\000\012\003\251\005\010" +
    "\006\003\034\007\001\001\000\002\001\001\000\004\012" +
    "\233\001\001\000\004\004\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\022\014\021\015\024\016\023\001\001\000\002" +
    "\001\001\000\004\026\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\026\001\001\000\004\026\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\022\016\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\041\035\040\001\001\000\004\036\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\046\006" +
    "\003\010\045\001\001\000\002\001\001\000\030\017\062" +
    "\020\052\021\066\023\064\024\050\025\051\026\063\027" +
    "\065\030\053\031\057\037\071\001\001\000\010\005\046" +
    "\006\003\010\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\017\224\020\052\021\066" +
    "\023\064\024\050\025\051\026\063\027\065\030\053\031" +
    "\057\037\071\001\001\000\002\001\001\000\006\031\103" +
    "\033\220\001\001\000\006\031\103\033\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\103\033\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\103\032\076\033\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\103" +
    "\033\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\103\033\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\103\033\110\001\001\000\002\001\001\000" +
    "\006\031\103\033\144\001\001\000\006\031\103\033\143" +
    "\001\001\000\006\031\103\033\142\001\001\000\006\031" +
    "\103\033\141\001\001\000\006\031\103\033\140\001\001" +
    "\000\006\031\103\033\137\001\001\000\006\031\103\033" +
    "\136\001\001\000\006\031\103\033\135\001\001\000\006" +
    "\031\103\033\134\001\001\000\006\031\103\033\133\001" +
    "\001\000\006\031\103\033\132\001\001\000\006\031\103" +
    "\033\131\001\001\000\006\031\103\033\130\001\001\000" +
    "\006\031\103\033\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\103\032\146\033\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\103\032\157\033\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\103\032\173\033\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\200\001\001\000\004" +
    "\022\202\001\001\000\004\036\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\211\041\207\001\001\000\006\040\214\041" +
    "\207\001\001\000\006\031\103\033\212\001\001\000\002" +
    "\001\001\000\004\036\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\231\001\001\000\012\003\230\005" +
    "\010\006\003\034\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\103\033\262" +
    "\001\001\000\002\001\001\000\006\031\103\033\264\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= DeclList MainFunDecl DeclList 
            {
              Object RESULT =null;
		int decList1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decList1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object decList1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mainFunDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mainFunDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mainFunDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decList2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decList2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decList2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramOp(
                (DeclList) decList1,
                (DeclList) decList2,
                (FunDeclOp) mainFunDecl
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= VarDecl DeclList 
            {
              Object RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 DeclList d = new DeclList();
               d.addVarDecl((VarDeclOp)varDecl);
               if (decList != null) d.addDecl((DeclList)decList);
               RESULT = d;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= FunDecl DeclList 
            {
              Object RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object funDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		DeclList d = new DeclList();
               d.addFunDecl((FunDeclOp)funDecl);
               if (decList != null) d.addDecl((DeclList)decList);
               RESULT = d;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              Object RESULT =null;
		RESULT = new DeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunDecl ::= MAIN FunDecl 
            {
              Object RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (FunDeclOp)funDecl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdInitList SEMI 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idInitList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarInitDeclOp(
                    (TypeLeaf) type,
                    (ArrayList<IdInitOp>) idInitList
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VAR IdInitObblList SEMI 
            {
              Object RESULT =null;
		int idInitObblListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idInitObblListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idInitObblList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarObbInitDeclOp((ArrayList<IdInitObbOp>) idInitObblList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = new TypeLeaf("integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = new TypeLeaf("bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= REAL 
            {
              Object RESULT =null;
		 RESULT = new TypeLeaf("float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = new TypeLeaf("string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = new TypeLeaf("char");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdInitList ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayList<IdInitOp> idList = new ArrayList<IdInitOp>();
                idList.add(
                    new IdInitOp(
                        new IdLeaf(
                            String.valueOf(id)
                        )
                    )
                );
                RESULT = idList;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdInitList ::= IdInitList COMMA ID 
            {
              Object RESULT =null;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idInitList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (idInitList == null) idInitList = new ArrayList<IdInitOp>();

	            ((ArrayList<IdInitOp>)idInitList).add(
                    new IdInitOp(
                        new IdLeaf(
                            String.valueOf(id)
                        )
                    )
	            );
                RESULT = idInitList;
	          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdInitList ::= ID ASSIGN Expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                ArrayList<IdInitOp> res = new ArrayList<>();
	                res.add(new IdInitOp(
                        new IdLeaf(String.valueOf(id)),
                        (ExprNode) expr
                        )
                    );
	                RESULT = res;
	           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdInitList ::= IdInitList COMMA ID ASSIGN Expr 
            {
              Object RESULT =null;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idInitList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	            if (idInitList == null) idInitList = new ArrayList<IdInitOp>();
	            ((ArrayList<IdInitOp>)idInitList).add(new IdInitOp(
	                new IdLeaf(String.valueOf(id)),
	                (ExprNode) expr
	            ));
	            RESULT = idInitList;
	        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitObblList ::= ID ASSIGN Const 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constLeafleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constLeafright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object constLeaf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IdInitObbOp> list = new ArrayList<>();
                    list.add(new IdInitObbOp(
	                    new IdLeaf(String.valueOf(id)),
                        (ConstLeaf) constLeaf
                    )
                );
                RESULT = list;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitObblList ::= IdInitObblList COMMA ID ASSIGN Const 
            {
              Object RESULT =null;
		int idInitObbListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idInitObbListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idInitObbList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constLeafleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constLeafright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object constLeaf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (idInitObbList == null) idInitObbList = new ArrayList<IdInitObbOp>();
                ((ArrayList<IdInitObbOp>)idInitObbList).add(
                    new IdInitObbOp(
	                    new IdLeaf(String.valueOf(id)),
                        (ConstLeaf) constLeaf
                    )
                );
                RESULT = idInitObbList;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstLeaf("integer", String.valueOf(value)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstLeaf("float", String.valueOf(value)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new ConstLeaf("bool", "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new ConstLeaf("bool", "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstLeaf("string", String.valueOf(value)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= CHAR_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstLeaf("char", String.valueOf(value)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object paramDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeOrVoidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeOrVoidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object typeOrVoid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               RESULT = new FunDeclOp(
                    String.valueOf(id),
                    (ArrayList<ParamDecl>)paramDeclList,
                    (TypeLeaf)typeOrVoid,
                    (Body)body
               );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunDecl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Body ::= LBRACK VarDeclList StatList RBRACK 
            {
              Object RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new Body(
                    (ArrayList<VarDeclOp>)varDeclList,
                    (ArrayList<StmtNode>)statList
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParamDeclList ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<ParamDecl>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              Object RESULT =null;
		int nonEmptyParamDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nonEmptyParamDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nonEmptyParamDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = (nonEmptyParamDeclList == null) ?
                    new ArrayList<ParamDecl>() :
                    ((NonEmptyParamDecl)nonEmptyParamDeclList).getParams()
                ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NonEmptyParamDeclList ::= ParDecl 
            {
              Object RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new NonEmptyParamDecl((ParamDecl)parDecl);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NonEmptyParamDeclList ::= NonEmptyParamDeclList PIPE ParDecl 
            {
              Object RESULT =null;
		int nonEmptyParamDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nonEmptyParamDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nonEmptyParamDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new NonEmptyParamDecl(
                    (ParamDecl)parDecl,
                    (NonEmptyParamDecl)nonEmptyParamDecl
                    )
                ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParDecl ::= Type IdList 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamDecl((TypeLeaf)type, (ArrayList<IdLeaf>)idList, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParDecl ::= OUT Type IdList 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamDecl((TypeLeaf)type, (ArrayList<IdLeaf>)idList, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TypeOrVoid ::= Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (TypeLeaf)type;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TypeOrVoid ::= VOID 
            {
              Object RESULT =null;
		 RESULT = new TypeLeaf("void");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarDeclList ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<VarDeclOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclList ::= VarDecl VarDeclList 
            {
              Object RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                ((ArrayList<VarDeclOp>)varDeclList).add(0, (VarDeclOp)varDecl);
                RESULT = varDeclList;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StatList ::= Stat StatList 
            {
              Object RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<StmtNode>) statList).add(0, (StmtNode) stat);
                RESULT = statList;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatList ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<StmtNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= IfStat 
            {
              Object RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ifStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StmtNode((IfStmt)ifStat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= ForStat 
            {
              Object RESULT =null;
		int forStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object forStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StmtNode((ForStmt)forStat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= ReadStat SEMI 
            {
              Object RESULT =null;
		int readStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int readStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object readStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StmtNode((ReadStmt)readStat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= WriteStat SEMI 
            {
              Object RESULT =null;
		int writeStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int writeStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object writeStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StmtNode((WriteStmt)writeStat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= AssignStat SEMI 
            {
              Object RESULT =null;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object assignStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StmtNode((AssignStmt)assignStat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= WhileStat 
            {
              Object RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object whileStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StmtNode((WhileStmt)whileStat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= FunCall SEMI 
            {
              Object RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object funCall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StmtNode((FunCall)funCall); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= SwitchStat SEMI 
            {
              Object RESULT =null;
		int switchStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int switchStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object switchStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StmtNode((SwitchStmt)switchStat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StmtNode(new ReturnExprStmt((ExprNode)expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= RETURN SEMI 
            {
              Object RESULT =null;
		 RESULT = new StmtNode(new ReturnExprStmt(null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SwitchStat ::= SWITCH ID COLON CaseList 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object caseList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SwitchStmt(
                    new IdLeaf(
                        String.valueOf(id)
                    ),
                    (ArrayList<CaseStmt>)caseList
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchStat",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CaseStat ::= CASE Expr Body 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CaseStmt(
                (ExprNode)expr,
                (Body) body
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseStat",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CaseList ::= CaseStat CaseList 
            {
              Object RESULT =null;
		int caseStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caseStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object caseStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object caseList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayList<CaseStmt> list = (ArrayList<CaseStmt>) caseList;
                list.add( (CaseStmt) caseStat);
                RESULT = list;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseList",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CaseList ::= CaseStat 
            {
              Object RESULT =null;
		int caseStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caseStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object caseStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<CaseStmt> list = new ArrayList<>();
                    list.add((CaseStmt)caseStat);
                    RESULT = list;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseList",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IfStat ::= IF Expr THEN Body Else 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elseBody = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStmt((ExprNode)expr, (Body) body, (ElseStmt) elseBody); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Else ::= 
            {
              Object RESULT =null;
		 RESULT = new ElseStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Else ::= ELSE Body 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (((Body) body).isEmpty()) ? null : new ElseStmt((Body)body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // WhileStat ::= WHILE Expr LOOP Body 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileStmt((ExprNode)expr, (Body)body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int startValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int startValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object startValue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int endValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int endValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object endValue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ForStmt(
                        new IdLeaf(String.valueOf(id)),
                        new ConstLeaf( "integer", String.valueOf(startValue)),
                        new ConstLeaf( "integer", String.valueOf(endValue)),
                        (Body) body
                   );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ReadStat ::= IdList READ STRING_CONST 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stringConst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReadStmt(
                ((ArrayList<IdLeaf>)idList),
                 String.valueOf(stringConst)
                 );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ReadStat ::= IdList READ 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadStmt(((ArrayList<IdLeaf>)idList)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IdList ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IdLeaf> list = new ArrayList<IdLeaf>();
                list.add(
                    new IdLeaf(String.valueOf(id))
                );
                RESULT = list;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IdList ::= IdList COMMA ID 
            {
              Object RESULT =null;
		int idList1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idList1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ((ArrayList<IdLeaf>)idList1).add(new IdLeaf(String.valueOf(id)));
                RESULT = idList1;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WriteStat ::= LPAR ExprList RPAR WRITE 
            {
              Object RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteStmt((ArrayList<ExprNode>)exprList, WriteStmt.WriteTypes.WRITE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WriteStat ::= LPAR ExprList RPAR WRITELN 
            {
              Object RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteStmt((ArrayList<ExprNode>)exprList, WriteStmt.WriteTypes.WRITELN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AssignStat ::= IdList ASSIGN ExprList 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStmt((ArrayList<IdLeaf>)idList, (ArrayList<ExprNode>)exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FunCall ::= ID LPAR ExprList RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprList1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprList1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprList1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunCall(
            new IdLeaf(String.valueOf(id)),
            (ArrayList<ExprNode>)exprList1
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FunCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunCall(new IdLeaf(String.valueOf(id))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExprList ::= Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayList<ExprNode> list = new ArrayList<>();
                list.add((ExprNode)expr);
                RESULT = list;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ExprList ::= Expr COMMA ExprList 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             ((ArrayList<ExprNode>)exprList).add(0, (ExprNode)expr);
             RESULT = exprList;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new ConstLeaf("bool", "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new ConstLeaf("bool", "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstLeaf("integer", String.valueOf(value)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= REAL_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstLeaf("float", String.valueOf(value)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= STRING_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstLeaf("string", String.valueOf(value)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= CHAR_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstLeaf("char", String.valueOf(value)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdLeaf(String.valueOf(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= FunCall 
            {
              Object RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funCall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = funCall; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp("plus",
            (ExprNode)expr1,
            (ExprNode)expr2
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp("minus",
            (ExprNode)expr1,
            (ExprNode)expr2
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp("times",
            (ExprNode)expr1,
            (ExprNode)expr2
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp("div",
            (ExprNode)expr1,
            (ExprNode)expr2
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp("and",
            (ExprNode)expr1,
            (ExprNode)expr2
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr POW Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp("pow",
            (ExprNode)expr1,
            (ExprNode)expr2
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr STR_CONCAT Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp("strconcat",
            (ExprNode)expr1,
            (ExprNode)expr2,
            "string"
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp("or",
            (ExprNode)expr1,
            (ExprNode)expr2
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp("gt",
            (ExprNode)expr1,
            (ExprNode)expr2
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp("ge",
            (ExprNode)expr1,
            (ExprNode)expr2
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp("lt",
            (ExprNode)expr1,
            (ExprNode)expr2
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp("le",
            (ExprNode)expr1,
            (ExprNode)expr2
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp("eq",
            (ExprNode)expr1,
            (ExprNode)expr2
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp("ne",
            (ExprNode)expr1,
            (ExprNode)expr2
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOp("minus",
            (ExprNode)expr1
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOp("not",
            (ExprNode)expr1
            ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParExpr((ExprNode)expr1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
